{"version":3,"file":"component---src-pages-lectures-getting-started-with-aspdotnet-core-ua-index-mdx-15ac6cd7198191497101.js","mappings":"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","sources":["webpack://binary-studio-academy-2021-stage-2/./src/pages/lectures/getting-started-with-aspdotnet-core/ua/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Lecture, SlackMessage, TimelineOfContents, Level, ThatsAllFolks, VideoWrapper, Language } from \"../../../../components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGlobe } from \"@fortawesome/pro-solid-svg-icons\";\nimport { faFacebookSquare, faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { nikitaKrasnov2018Avatar } from \"../../../../assets/images/avatars/intro-rounded\";\nimport SnippetL02S01 from \"../assets/snippets/snippet-l02-s01.mdx\";\nimport SnippetL02S02 from \"../assets/snippets/snippet-l02-s02.mdx\";\nimport SnippetL02S03 from \"../assets/snippets/snippet-l02-s03.mdx\";\nimport SnippetL03S01 from \"../assets/snippets/snippet-l03-s01.mdx\";\nimport SnippetL03S02 from \"../assets/snippets/snippet-l03-s02.mdx\";\nimport SnippetL03S03 from \"../assets/snippets/snippet-l03-s03.mdx\";\nimport SnippetL03S04 from \"../assets/snippets/snippet-l03-s04.mdx\";\nimport SnippetL03S05 from \"../assets/snippets/snippet-l03-s05.mdx\";\nimport SnippetL04S01 from \"../assets/snippets/snippet-l04-s01.mdx\";\nimport SnippetL04S02 from \"../assets/snippets/snippet-l04-s02.mdx\";\nimport SnippetL04S03 from \"../assets/snippets/snippet-l04-s03.mdx\";\nimport SnippetL04S04 from \"../assets/snippets/snippet-l04-s04.mdx\";\nimport SnippetL04S05 from \"../assets/snippets/snippet-l04-s05.mdx\";\nimport SnippetL04S06 from \"../assets/snippets/snippet-l04-s06.mdx\";\nimport '../styles.css';\nexport const metadata = {\n  orderId: 5,\n  author: \"Нікіта Краснов\",\n  title: \"Getting started with ASP.NET Core\",\n  description: \"Після невеликого вступу, де мова піде про переваги <strong>.NET Core</strong>, Нікіта продемонстує як створити додаток на <strong>ASP.NET Core</strong> з використанням <strong>ASP.NET Core Web API</strong>, закодить сервіси та контроллери, а потім пояснить, що таке dependency injection, роутінг і middleware.\",\n  keywords: [\"hola\", \"guapa\"],\n  duration: \"29 хв\",\n  publishedAt: \"2021-05-10T00:00:00\",\n  hiddenFromMainPage: true\n};\nexport const _frontmatter = {};\nconst layoutProps = {\n  metadata,\n  _frontmatter\n};\nconst MDXLayout = Lecture;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <div><h1><strong>Getting started with ASP.NET Core</strong></h1></div>\n    <Language currentLanguage=\"ua\" languages={{\n      \"ua\": \"lectures/getting-started-with-aspdotnet-core/ua\",\n      \"ru\": \"lectures/getting-started-with-aspdotnet-core\"\n    }} mdxType=\"Language\" />\n    <VideoWrapper duration=\"28 хв 14 сек\" mdxType=\"VideoWrapper\">\n  <iframe src=\"https://www.youtube.com/embed/Fa9RPd1tL30\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n    </VideoWrapper>\n    <div>\n  <div className=\"author\">\n    <div className=\"avatar-wrapper\">\n      <object className=\"avatar-object\" data={nikitaKrasnov2018Avatar} role=\"img\" aria-label=\"My profile picture\"></object>\n    </div>\n    <div className=\"profile\">\n      <h3 className=\"name\">Нікіта Краснов</h3>\n      <ul className=\"contacts\">\n        <li>\n          <a href=\"https://www.facebook.com/krsnv\" rel=\"author\" className=\"facebook\">\n            <FontAwesomeIcon icon={faFacebookSquare} className=\"icon\" mdxType=\"FontAwesomeIcon\" />\n            <span>Nikita Krasnov</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"https://github.com/k-r-s-n-v\" rel=\"author\" className=\"github\">\n            <FontAwesomeIcon icon={faGithub} className=\"icon\" mdxType=\"FontAwesomeIcon\" />\n            <span>k-r-s-n-v</span>\n          </a>\n        </li>\n        <li><a href=\"https://www.linkedin.com/in/nikita-krasnov-b51244116/\" rel=\"author\" className=\"linkedin\"><svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"linkedin\" className=\"svg-inline--fa fa-linkedin fa-w-14 icon\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z\"></path></svg><span>nikita-krasnov</span></a></li>\n      </ul>\n      <p className=\"about\">\n        Нікіта працює в <a href=\"https://binary-studio.com\"><strong>Binary Studio</strong></a> бекенд-розробником. Категорично не вживає алкоголь, але впевнено вживає .NET-фреймворки, електронну музику, функціональне програмування та футболки з принтами мемів. Відвідує технічні мітапи та конференції, і вам радить спробувати - після того, як впораєтеся з домашнім завданням до цієї лекції😉.\n      </p>\n    </div>\n  </div>\n  <div className=\"bubble\" style={{\n        \"margin\": \"-0.5em 1em 1em\"\n      }}>\n    <strong>Привіт!</strong> 👋<br />\n    Я роблю нотатки до цієї лекції англійською мовою, адже для кожного розробника важливо вміти читати документацію, яка рідко переводиться з англійської. Під час розповіді я дам вам поради та рекомендації, щоб ви краще розуміли як працює наш технічний стек, і до кінця цього уроку у вас буде веб-додаток на ASP.NET Core. Це - ознайомча лекція, тому:\n    <ol className=\"compact inverted\">\n      <li>деякі речі потрібно буде загуглити власноруч;</li>\n      <li>можливо ви вже все це знаєте (повторити все одно не завадить).</li>\n    </ol>\n    Поїхали! <span className=\"tooltip\" data-tooltip=\"Так, я люблю самокати!\">🛴</span>\n  </div>\n    </div>\n    <div id=\"table-of-contents\" className=\"table-of-contents\" style={{\n      \"marginTop\": \"1em\"\n    }}>\n  <TimelineOfContents timeline={[{\n        linkTo: \"#intro-to-dotnet-core\",\n        title: \"Intro to .NET Core\"\n      }, {\n        linkTo: \"#creating-an-app\",\n        title: \"Creating an app\"\n      }, {\n        linkTo: \"#controllers-and-services\",\n        title: \"Controllers and services\"\n      }, {\n        linkTo: \"#additional-features\",\n        title: \"Additional Features\"\n      }]} mdxType=\"TimelineOfContents\" />\n    </div>\n    <Level id=\"intro-to-dotnet-core\" number=\"1\" name={<span>Intro to <a href=\"https://dotnet.microsoft.com/download\">.NET Core</a></span>} difficulty=\"No worries.\" objectives=\"Familiarize yourself with .NET Core fundamentals because you are going to be buddies.\" mdxType=\"Level\" />\n    <h5>How Microsoft came up with .NET Core</h5>\n    <p>{`There were times when the term \".NET\" meant Windows platform only. It imposed some restrictions for deploying because most machines have Linux as an operating system. So the guys in Microsoft gathered for a meeting and came up with .NET Core. The main idea of the framework is cross-platform apps, which means you can host your app on a variety of OS. Furthermore, it’s open-source, hence it has great community support.`}</p>\n    <h5>.NET Core advantages</h5>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Cross-platform`}</strong><br parentName=\"li\"></br>\n        {`Runs on Windows, Linux, macOS`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Flexible deployment`}</strong><br parentName=\"li\"></br>\n        {`The framework can be included in your app or installed side-by-side user-or machine-wide`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Command-line tools`}</strong><br parentName=\"li\"></br>\n        {`.NET Core has great CLI, therefore all product scenarios can be executed using command-line`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Compatibility`}</strong><br parentName=\"li\"></br>\n        {`.NET Core is compatible with .NET Framework, Xamarin, and Mono, via the .NET Standard Library`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Open-source`}</strong><br parentName=\"li\"></br>\n        {`The .NET Core platform is open source, using MIT and Apache 2 licenses. You are welcome to contribute`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Supported by Microsoft`}</strong><br parentName=\"li\"></br>\n        {`Huge corporation forces .NET Core to develop and gain new features`}</li>\n    </ol>\n    <h5>What you can build with .NET Core</h5>\n    <div className=\"columns\">\n  <div className=\"column col-4\">\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <a href=\"https://docs.microsoft.com/en-us/aspnet/core/mvc/overview\"><strong>ASP.NET Core MVC</strong></a>\n      </div>\n      <div className=\"panel-body\">\n        Web apps which implement Model-View-Controller pattern and use Razor for HTML markdown with C# snippets\n      </div>\n    </div>\n  </div>\n  <div className=\"column col-4\">\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <a href=\"https://docs.microsoft.com/en-us/aspnet/core/web-api/\"><strong>ASP.NET Core Web API</strong></a>\n      </div>\n      <div className=\"panel-body\">\n        Backend app which implements business logic and can be used by any client <em>(whether it’s Angular-, React-, or WhateverFramework-based frontend, mobile apps, etc.)</em>\n      </div>\n    </div>\n  </div>\n  <div className=\"column col-4\">\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <a href=\"https://docs.microsoft.com/en-us/windows/uwp/index\"><strong>UWP (Universal Windows Platform)</strong></a>\n      </div>\n      <div className=\"panel-body\">\n        Native applications for phones, laptops, tablets, Xbox, IoT\n      </div>\n    </div>\n  </div>\n    </div>\n    <h5>What you need to start</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`.NET Core SDK`}</strong>{` includes everything you need to build and run .NET Core applications. Since you are not limited to Windows only, you can choose whatever IDE or text editor you want (`}<a href=\"https://visualstudio.microsoft.com/\"><strong>{`Visual Studio`}</strong></a>{`, `}<a href=\"https://code.visualstudio.com/\"><strong>{`Visual Studio Code`}</strong></a>{`, `}<a href=\"https://www.jetbrains.com/rider/\"><strong>{`JetBrains Rider`}</strong></a>{`, `}<a href=\"https://www.sublimetext.com/\"><strong>{`Sublime`}</strong></a>{`, `}<a href=\"https://atom.io/\"><strong>{`Atom`}</strong></a>{`, and so on). You are able to write code using your favorite tool and execute needed actions using the CLI. Some useful CLI commands are:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet new`}</code>{` — initializes a sample console C# project`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet restore`}</code>{` — restores the dependencies for a given application`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet build`}</code>{` — builds a .NET Core application`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet publish`}</code>{` — publishes a .NET portable or self-contained application`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet run`}</code>{` — runs the application from source`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet test`}</code>{` — runs tests using a test runner specified in the project.json`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet pack`}</code>{` — creates a NuGet package of your code`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`.NET Core Runtime`}</strong>{` includes just the resources required to run existing .NET Core applications (this runtime is included in the SDK)`}</p>\n      </li>\n    </ul>\n    <Level id=\"creating-an-app\" number=\"2\" name=\"Creating an app\" difficulty=\"Gets warmer, typing is required.\" objectives={<span>Learn <code>dotnet new</code>, understand the anatomy of ASP.NET Core app.</span>} mdxType=\"Level\" />\n    <h5>What is ASP.NET Core <sup><strong><a href=\"https://dotnet.microsoft.com/learn/web/what-is-aspnet-core\">[1]</a> <a href=\"https://docs.microsoft.com/en-us/aspnet/core/\">[2]</a></strong></sup></h5>\n    <p><strong parentName=\"p\">{`ASP.NET`}</strong>{` is a popular web-development framework for building web apps on the .NET platform. `}<strong parentName=\"p\">{`ASP.NET Core`}</strong>{` is the open-source version of ASP.NET, that runs on macOS, Linux, and Windows. It was first released in 2016 and is a re-design of earlier Windows-only versions of ASP.NET. In comparison to ASP.NET, Core version provides:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Cleaner and modular architecture`}</li>\n      <li parentName=\"ul\">{`Tighter security`}</li>\n      <li parentName=\"ul\">{`Reduced servicing`}</li>\n      <li parentName=\"ul\">{`Improved performance`}</li>\n    </ul>\n    <h5>Why use it</h5>\n    <ul>\n      <li parentName=\"ul\">{`Integration of modern client-side frameworks and development workflows`}</li>\n      <li parentName=\"ul\">{`A cloud-ready environment-based configuration system`}</li>\n      <li parentName=\"ul\">{`Built-in dependency injection`}</li>\n      <li parentName=\"ul\">{`New light-weight and modular HTTP request pipeline`}</li>\n      <li parentName=\"ul\">{`Ability to host on IIS or self-host in your own process`}</li>\n      <li parentName=\"ul\">{`Built on .NET Core, which supports true side-by-side app versioning`}</li>\n      <li parentName=\"ul\">{`Ships entirely as NuGet packages`}</li>\n      <li parentName=\"ul\">{`New tooling that simplifies modern web development`}</li>\n      <li parentName=\"ul\">{`Build and run cross-platform ASP.NET apps on Windows, Linux, and macOS`}</li>\n      <li parentName=\"ul\">{`Open-source and community focused`}</li>\n    </ul>\n    <h5>Create a new app by running <code>dotnet new webapi</code> <sup><strong><a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup?view=aspnetcore-2.2\">[1]</a></strong></sup></h5>\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-1\">\n      <strong>Program.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      This is how the entry point looks like:\n      <SnippetL02S01 mdxType=\"SnippetL02S01\" />\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-2\">\n      <strong>Startup.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      <ul>\n        <li>\n          <code>Configure</code> — how the application will respond to individual HTTP requests (you can setup pipelines which will process requests):\n          <SnippetL02S02 mdxType=\"SnippetL02S02\" />\n        </li>\n        <li>\n          <code>ConfigureServices</code> — method for configuring services that are used by your application:\n          <SnippetL02S03 mdxType=\"SnippetL02S03\" />\n        </li>\n      </ul>\n    </div>\n  </li>\n    </ul>\n    <Level id=\"controllers-and-services\" number=\"3\" name=\"Controllers and services\" difficulty=\"No kidding.\" objectives=\"Learn that services are no joke and business logic shouldn't live in controllers.\" mdxType=\"Level\" />\n    <p>{`I’m going to show you how we can write API using `}<strong parentName=\"p\">{`ASP.NET Core Web API`}</strong>{`. We will be able to get a list of users and get the user by id. `}<a href=\"https://jsonplaceholder.typicode.com/\"><strong>{`JsonPlaceholder`}</strong></a>{` will be used for the data set.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`First, let’s run the application we’ve just created. You can use `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`dotnet run`}</code>{` command to start the server. To make sure that our API is working, we should send a request to the `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`ValuesController`}</code>{` that was created by default. Open `}<a parentName=\"p\" {...{\n            \"href\": \"https://localhost:5001/api/values\"\n          }}><strong parentName=\"a\">{`https://localhost:5001/api/values`}</strong></a>{` — you should receive `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`[\"value1\",\"value2\"]`}</code>{` JSON as a response.`}</p>\n        <div className=\"bubble small subtle\">\n  Ти можеш використовувати Postman для тестування твого API, але я рекомендую використовувати розширення для VSCode ― <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\"><strong>REST Client</strong></a>\n        </div>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Let’s practice a bit more and create a new `}<strong parentName=\"p\">{`Web API Controller`}</strong>{` controller. Create a new file called `}<strong parentName=\"p\">{`UsersController.cs`}</strong>{` in the `}<strong parentName=\"p\">{`Controllers`}</strong>{` folder. Add two GET methods which will return a list of users and a user by his id. Use `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`ValuesController`}</code>{` as an example. Eventually, you should have something like this:`}</p>\n        <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-1\">\n      <strong>UsersController.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      <SnippetL03S01 mdxType=\"SnippetL03S01\" />\n    </div>\n  </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Start the application and go check `}<a parentName=\"p\" {...{\n            \"href\": \"https://localhost:5001/api/users\"\n          }}><strong parentName=\"a\">{`https://localhost:5001/api/users`}</strong></a>{` to make sure that your new controller is available.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Writing business logic in controllers isn’t the best idea, so it would be better if we created a separate service for this purpose — let's call it `}<strong parentName=\"p\">{`UserService`}</strong>{`:`}</p>\n        <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-3\">\n      <strong>UsersService.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      <SnippetL03S03 mdxType=\"SnippetL03S03\" />\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-2\">\n      <strong>UsersController.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      <SnippetL03S02 mdxType=\"SnippetL03S02\" />\n    </div>\n  </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run the application and test `}<a parentName=\"p\" {...{\n            \"href\": \"https://localhost:5001/api/users\"\n          }}><strong parentName=\"a\">{`https://localhost:5001/api/users`}</strong></a>{` again to make sure everything works as before.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the next step, I suggest implementing `}<strong>{`remote data loading`}</strong>{` using JsonPlaceholder service. In order to serialize response, we will need to add a package that works with JSON. Use `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`dotnet add package Newtonsoft.Json`}</code>{` command to install the package.`}</p>\n        <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-4\">\n      <strong>UsersController.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      <SnippetL03S04 mdxType=\"SnippetL03S04\" />\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-5\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-5\">\n      <strong>UsersService.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      <SnippetL03S05 mdxType=\"SnippetL03S05\" />\n    </div>\n  </li>\n        </ul>\n      </li>\n    </ol>\n    <Level id=\"additional-features\" number=\"4\" name=\"Additional features\" difficulty=\"Like the first one times five?\" objectives=\"Troubleshoot, debug, extend, and wire up your app better.\" mdxType=\"Level\" />\n    <h5>A short review of Dependency Injection (Singleton, Scoped, Transient)</h5>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2\"\n      }}><strong parentName=\"a\">{`Dependency injection (DI)`}</strong></a>{` — software design pattern, which is a technique for achieving `}<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#dependency-inversion\"><strong>{`Inversion of Control (IoC)`}</strong></a>{` between classes and their dependencies. In our case `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`UsersController`}</code>{` depends on `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`UsersService`}</code>{`. There might be a case when `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`JsonPlaceholder`}</code>{` won’t respond to our requests. In this case, we would want to use another implementation of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`UsersService`}</code>{` (use another source or provide mocked data). We would need to go through our app and change class name manually in all places where it’s used. With DI we can do it easily in one place (`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ConfigureServices()`}</code>{` in `}<strong parentName=\"p\">{`Startup.cs`}</strong>{`). Moreover, in .NET Core DI container can create instances of dependencies. Otherwise, we would need to do it manually in every service. In addition to that, .NET Core DI container takes on the responsibility of creating an instance of the dependency and disposing of it when it's no longer needed. There are a few service lifetime options:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Singleton`}</strong>{` — services are created the first time they're requested (or when `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`ConfigureServices`}</code>{` is run and an instance is specified with the service registration). Every subsequent request uses the same instance.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Scoped`}</strong>{` — services are created once per client request (connection).`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Transient`}</strong>{` — services are created each time they're requested from the service container. This lifetime works best for lightweight, stateless services. Let’s apply `}<strong parentName=\"li\">{`Transient`}</strong>{` to our `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`UsersService`}</code>{`:`}\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`Add the following code to `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`ConfigureServices()`}</code>{` in `}<strong parentName=\"li\">{`Startup.cs`}</strong>{`:`}\n            <SnippetL04S01 mdxType=\"SnippetL04S01\" />\n          </li>\n          <li parentName=\"ol\">{`Update `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`UsersController`}</code>{`’s constructor:`}\n            <SnippetL04S02 mdxType=\"SnippetL04S02\" />\n          </li>\n          <li parentName=\"ol\">{`Going further, we can create an interface for `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`UsersService`}</code>{`. It will let us switch services in one place. Change the previous version of service registration to the next one:`}\n            <SnippetL04S03 mdxType=\"SnippetL04S03\" />\n          </li>\n          <li parentName=\"ol\">{`Update `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`UsersController`}</code>{` to operate with the interface (notice how we got rid of the explicit class name):`}\n            <SnippetL04S04 mdxType=\"SnippetL04S04\" />\n          </li>\n          <li parentName=\"ol\">{`Don’t forget to inherit our `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`UsersService`}</code>{` from `}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`IUsersService`}</code>{`:\n`}<code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`public class UsersService : IUsersService`}</code></li>\n        </ol>\n      </li>\n    </ol>\n    <h5>Middleware</h5>\n    <p>{`Middleware is software that's assembled into an app pipeline to handle requests and responses. Long story short: the app applies all middlewares one by one for each request.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/index/_static/request-delegate-pipeline.png?view=aspnetcore-2.2\",\n        \"alt\": \"php-fpm_nginx\"\n      }}></img></p>\n    <p>{`For example, if you want to log all the requests, you can add a pipeline (in the example below `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Console.WriteLine`}</code>{` is used for simplicity, you can use any logging framework there). So, add the next code into the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Configure`}</code>{` method in `}<strong parentName=\"p\">{`Startup.cs`}</strong>{`:`}</p>\n    <SnippetL04S05 mdxType=\"SnippetL04S05\" />\nNow start the app, send a request and see the console output.\n    <h5>Routing</h5>\n    <p>{`Routing is responsible for mapping request URIs to endpoint selectors and dispatching incoming requests to endpoints.  Routes are defined in the app and configured when the app starts. A route can optionally extract values from the URL contained in the request, and these values can then be used for request processing. Basically, routing is a middleware. Using the picture above, imagine how request comes to the server, then it’s being processed by a chain of middlewares and then routing middleware matches URL to controller and method names. In WebAPI we define route using the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Route`}</code>{` attribute:`}</p>\n    <SnippetL04S06 mdxType=\"SnippetL04S06\" />\nWe can do the same for methods in the controller.\n    <ThatsAllFolks mdxType=\"ThatsAllFolks\" />\n    <div className=\"bubble\">\n  Ось так коротко про ASP.NET Core. На цьому все, дуже дякую за увагу🎩! Ставте питання та залишайте відгуки на лекцію на сайті академії. Успіхів з домашкою, скоро побачимося, бувай! <span className=\"tooltip\" data-tooltip=\"Садится на самокат,&#x000A;Уезжает в закат.&#x000A;Но обещал вернуться.\">🛴</span>\n    </div>\n\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["metadata","orderId","author","title","description","keywords","duration","publishedAt","hiddenFromMainPage","_frontmatter","layoutProps","MDXLayout","Lecture","MDXContent","components","props","mdxType","currentLanguage","languages","src","frameBorder","allow","allowFullScreen","className","data","nikitaKrasnov2018Avatar","role","href","rel","icon","faFacebookSquare","faGithub","focusable","xmlns","viewBox","fill","d","style","id","timeline","linkTo","number","name","difficulty","objectives","parentName","type","htmlFor","isMDXComponent"],"sourceRoot":""}