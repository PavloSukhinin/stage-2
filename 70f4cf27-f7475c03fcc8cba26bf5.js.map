{"version":3,"file":"70f4cf27-f7475c03fcc8cba26bf5.js","mappings":"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","sources":["webpack://binary-studio-academy-2021-stage-2/./src/pages/lectures/dotnet-ecosystem-and-csharp-best-practices/ru/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Lecture, SlackMessage, TimelineOfContents, Level, ThatsAllFolks, VideoWrapper, Language } from \"../../../../components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFacebookSquare, faGithub, faLinkedin, faSkype } from \"@fortawesome/free-brands-svg-icons\";\nimport { rostyslavDiakiv2018Avatar } from \"../../../../assets/images/avatars/intro-rounded\";\nimport aEtoMagazin from \"../assets/images/a-eto-magazin.png\";\nimport exceptionClassHierarchy from \"../assets/images/exception-class-hierarchy.jpg\";\nimport boxingUnboxing from \"../assets/images/boxing-unboxing.gif\";\nimport constraintsTypes from \"../assets/images/constraints-types.png\";\nimport nugetLogo from \"../assets/images/nuget-logo.png\";\nimport dotnetPlatform from \"../assets/images/dotnet-platform.jpg\";\nimport dotnet5Platform from \"../assets/images/dotnet-5-platform.png\";\nimport lambdaExpressionStructure from \"../assets/images/lambda-expression-structure.png\";\nimport delegateEventFlow from \"../assets/images/delegate-event-flow.png\";\nimport collectionsHierarchy from \"../assets/images/collections-hierarchy.jpg\";\nimport stack from \"../assets/images/stack.jpg\";\nimport stackAndHeap from \"../assets/images/stack-and-heap.gif\";\nimport SnippetL02S01 from \"../assets/snippets/snippet-l02-s01.mdx\";\nimport SnippetL02S02 from \"../assets/snippets/snippet-l02-s02.mdx\";\nimport SnippetL02S03 from \"../assets/snippets/snippet-l02-s03.mdx\";\nimport SnippetL02S04 from \"../assets/snippets/snippet-l02-s04.mdx\";\nimport SnippetL02S05 from \"../assets/snippets/snippet-l02-s05.mdx\";\nimport SnippetL02S06 from \"../assets/snippets/snippet-l02-s06.mdx\";\nimport SnippetL02S07 from \"../assets/snippets/snippet-l02-s07.mdx\";\nimport SnippetL03S01 from \"../assets/snippets/snippet-l03-s01.mdx\";\nimport SnippetL03S02 from \"../assets/snippets/snippet-l03-s02.mdx\";\nimport SnippetL03S03 from \"../assets/snippets/snippet-l03-s03.mdx\";\nimport SnippetL03S04 from \"../assets/snippets/snippet-l03-s04.mdx\";\nimport SnippetL03S05 from \"../assets/snippets/snippet-l03-s05.mdx\";\nimport SnippetL03S06 from \"../assets/snippets/snippet-l03-s06.mdx\";\nimport SnippetL03S07 from \"../assets/snippets/snippet-l03-s07.mdx\";\nimport SnippetL03S08 from \"../assets/snippets/snippet-l03-s08.mdx\";\nimport SnippetL03S09 from \"../assets/snippets/snippet-l03-s09.mdx\";\nimport SnippetL03S10 from \"../assets/snippets/snippet-l03-s10.mdx\";\nimport SnippetL03S11 from \"../assets/snippets/snippet-l03-s11.mdx\";\nimport SnippetL03S12 from \"../assets/snippets/snippet-l03-s12.mdx\";\nimport SnippetL03S13 from \"../assets/snippets/snippet-l03-s13.mdx\";\nimport SnippetL03S14 from \"../assets/snippets/snippet-l03-s14.mdx\";\nimport SnippetL03S15 from \"../assets/snippets/snippet-l03-s15.mdx\";\nimport SnippetL03S16 from \"../assets/snippets/snippet-l03-s16.mdx\";\nimport SnippetL03S17 from \"../assets/snippets/snippet-l03-s17.mdx\";\nimport SnippetL03S18 from \"../assets/snippets/snippet-l03-s18.mdx\";\nimport SnippetL03S19 from \"../assets/snippets/snippet-l03-s19.mdx\";\nimport SnippetL03S20 from \"../assets/snippets/snippet-l03-s20.mdx\";\nimport SnippetL03S21 from \"../assets/snippets/snippet-l03-s21.mdx\";\nimport SnippetL03S22 from \"../assets/snippets/snippet-l03-s22.mdx\";\nimport SnippetL03S23 from \"../assets/snippets/snippet-l03-s23.mdx\";\nimport SnippetL03S24 from \"../assets/snippets/snippet-l03-s24.mdx\";\nimport SnippetL03S25 from \"../assets/snippets/snippet-l03-s25.mdx\";\nimport SnippetL03S26 from \"../assets/snippets/snippet-l03-s26.mdx\";\nimport SnippetL03S27 from \"../assets/snippets/snippet-l03-s27.mdx\";\nimport SnippetL03S28 from \"../assets/snippets/snippet-l03-s28.mdx\";\nimport SnippetL03S29 from \"../assets/snippets/snippet-l03-s29.mdx\";\nimport SnippetL03S30 from \"../assets/snippets/snippet-l03-s30.mdx\";\nimport SnippetL03S31 from \"../assets/snippets/snippet-l03-s31.mdx\";\nimport SnippetL03S32 from \"../assets/snippets/snippet-l03-s32.mdx\";\nimport SnippetL03S33 from \"../assets/snippets/snippet-l03-s33.mdx\";\nimport SnippetL03S34 from \"../assets/snippets/snippet-l03-s34.mdx\";\nimport SnippetL04S01 from \"../assets/snippets/snippet-l04-s01.mdx\";\nimport SnippetL04S02 from \"../assets/snippets/snippet-l04-s02.mdx\";\nimport SnippetL04S03 from \"../assets/snippets/snippet-l04-s03.mdx\";\nimport SnippetL04S04 from \"../assets/snippets/snippet-l04-s04.mdx\";\nimport SnippetL04S05 from \"../assets/snippets/snippet-l04-s05.mdx\";\nimport SnippetL04S06 from \"../assets/snippets/snippet-l04-s06.mdx\";\nimport SnippetL04S07 from \"../assets/snippets/snippet-l04-s07.mdx\";\nimport SnippetL04S08 from \"../assets/snippets/snippet-l04-s08.mdx\";\nimport SnippetL04S09 from \"../assets/snippets/snippet-l04-s09.mdx\";\nimport SnippetL04S10 from \"../assets/snippets/snippet-l04-s10.mdx\";\nimport SnippetL04S11 from \"../assets/snippets/snippet-l04-s11.mdx\";\nimport SnippetL04S12 from \"../assets/snippets/snippet-l04-s12.mdx\";\nimport \"../styles.css\";\nexport const metadata = {\n  orderId: 4,\n  author: \"Ростислав Дякив\",\n  title: \".NET ecosystem and C# best practices\",\n  description: \"Ростик делает детальный обзор экосистемы <strong>.NET</strong>, рассказывает про особенности работы с памятью, на примерах показывает все важные понятия языка программирования <strong>С#</strong>, а заканчивает универсальной подборкой лучших практик написания чистого кода, которые актуальны для любого языка.\",\n  keywords: [\"hola\", \"guapa\"],\n  duration: \"1 год 8 мин\",\n  publishedAt: \"2021-05-04T00:00:00\",\n  hiddenFromMainPage: true\n};\nexport const _frontmatter = {};\nconst layoutProps = {\n  metadata,\n  _frontmatter\n};\nconst MDXLayout = Lecture;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <div><h1><strong>.NET ecosystem and C# best practices</strong></h1></div>\n    <Language currentLanguage=\"ru\" languages={{\n      \"ua\": \"lectures/dotnet-ecosystem-and-csharp-best-practices\",\n      \"ru\": \"lectures/dotnet-ecosystem-and-csharp-best-practices/ru\"\n    }} mdxType=\"Language\" />\n    <VideoWrapper duration=\"1 час 8 мин\" mdxType=\"VideoWrapper\">\n  <iframe src=\"https://www.youtube.com/embed/iAAD8TiARn4\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n    </VideoWrapper>\n    <div>\n  <div className=\"author\">\n    <div className=\"avatar-wrapper\">\n      <object className=\"avatar-object\" data={rostyslavDiakiv2018Avatar} role=\"img\" aria-label=\"My profile picture\"></object>\n    </div>\n    <div className=\"profile\">\n      <h3 className=\"name\">Ростислав Дякив</h3>\n      <ul className=\"contacts\">\n        <li>\n          <a href=\"https://www.facebook.com/rostislav.dyakiv\" rel=\"author\" className=\"facebook\">\n            <FontAwesomeIcon icon={faFacebookSquare} className=\"icon\" mdxType=\"FontAwesomeIcon\" />\n            <span>rostislav.dyakiv</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"https://github.com/rostyslav-diakiv\" rel=\"author\" className=\"github\">\n            <FontAwesomeIcon icon={faGithub} className=\"icon\" mdxType=\"FontAwesomeIcon\" />\n            <span>rostyslav-diakiv</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"https://www.linkedin.com/in/rostyslav-diakiv/\" rel=\"author\" className=\"linkedin\">\n            <FontAwesomeIcon icon={faLinkedin} className=\"icon\" mdxType=\"FontAwesomeIcon\" />\n            <span>rostyslav-diakiv</span>\n          </a>\n        </li>\n        <li>\n          <a href=\"skype:rostik8803\" rel=\"author\" className=\"skype\">\n            <FontAwesomeIcon icon={faSkype} className=\"icon\" mdxType=\"FontAwesomeIcon\" />\n            <span>rostik8803</span>\n          </a>\n        </li>\n      </ul>\n      <p className=\"about\">\n        Ростик работает Full Stack веб-разработчиком в <a href=\"https://binary-studio.com\"><strong>Binary Studio</strong></a>. Пишет на C# и TypeScript. Из хобби — слушать музыку, играть в футбол, путешествовать, проходить квесты и смотреть сериальчики, из которых лучшим считает <a href=\"https://www.NETflix.com/ua/title/80002479\"><strong>Peaky Blinders</strong></a>. Решил впервые записать лекцию для Академии, чтобы тебе было проще разобраться с экосистемой .NET.\n      </p>\n    </div>\n  </div>\n  <div className=\"bubble\" style={{\n        \"margin\": \"-0.5em 1em 1em\"\n      }}>\n    <strong className=\"dorov\">Привет!</strong>\n    {\n          /* <span class=\"tooltip\" data-tooltip=\"А это магазин?\">\n           <img src={aEtoMagazin} class=\"a-eto-magazin\" alt=\"А это магазин?\" />\n          </span> */\n        }\n    <br />\n    Я немного волнуюсь, но, в целом, все тип-топ. Лекция про экосистему .NET и лучшие практики написания C#-кода начнется через 5..4..3… Но для начала 🥁 несколько дисклеймеров о самой лекции:\n    <ol className=\"compact inverted\">\n      <li>О многом, из того, о чем пойдет речь, вы, наверное уже слышали (или нет);</li>\n      <li>Некоторые темы рассматриваются поверхностно, без углубления в подробности;</li>\n      <li>Прошу прощения за «бее» и «ээм», оно само 😅;</li>\n      <li>Лекция может показаться затянутой, но believe me — это быстрее, чем погружаться в документацию MSDN-а в поиска нужной инфы.</li>\n    </ol>\n    <p>Вам также понадобится стартер-пак .NET-девелопера. Можно купить на Галицком рынке в 5-ом павильоне… Шучу, просто установи вот это: <a href=\"https://dotnet.microsoft.com/download\" title=\".NET Core\"><strong>.NET Core</strong></a> (это для <a href=\"#\">примеров</a>), <a href=\"https://git-scm.com/\" title=\"Git\"><strong>Git</strong></a>, <a href=\"https://visualstudio.microsoft.com/\" title=\"Visual Studio\"><strong>Visual Studio</strong></a> или <a href=\"https://www.jetbrains.com/rider/\" title=\"Rider\"><strong>Rider</strong></a>. Окей, запускаем <a href=\"https://slides.com/diakivrostyslav/dotnet-ecostystem/live#/lecture-title\">слайдики</a> и погнали!\n    </p>\n  </div>\n    </div>\n    <div id=\"table-of-contents\" className=\"table-of-contents\" style={{\n      \"marginTop\": \"1em\"\n    }}>\n  <TimelineOfContents timeline={[{\n        linkTo: \"#dotnet-platform-overview\",\n        title: \"Обзор .NET платформы\"\n      }, {\n        linkTo: \"#dotnet-under-the-hood\",\n        title: \".NET под катопом\"\n      }, {\n        linkTo: \"#csharp-essential-topics\",\n        title: \"Самые важные понятия C#\"\n      }, {\n        linkTo: \"#clean-code-principles\",\n        title: \"Принципы чистого кода\"\n      }]} mdxType=\"TimelineOfContents\" />\n    </div>\n    <Level id=\"dotnet-platform-overview\" number=\"1\" name=\"Обзор .NET платформы\" difficulty={<span><a href=\"https://www.urbandictionary.com/define.php?term=easy%20peasy%20lemon%20squeezy\">Easy peasy lemon squeezy</a>.</span>} objectives={<span>Почитать/послушать о платформе .NET в целом <em>(много времени не займет)</em>.</span>} labels={{\n      level: \"Раздел\",\n      backToTop: \"Наверх\",\n      difficulty: \"Сложность:\",\n      objectives: \"Цель:\"\n    }} mdxType=\"Level\" />\n    <p style={{\n      \"marginLeft\": \"0.25em\"\n    }}>Сейчас компания Microsoft вкладывает достаточно много ресурсов в развитие .NET и их облачной платформы — Azure <em>(Ажур, Эйжур, Ейжа)</em> и больше всех контрибьютит в open source. \nИнфраструктура .NET стремительно растет и развивается, постоянно создаются новые инструменты для работы с ней, добавляются интеграции с другими сервисами.\n    </p>\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-1-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-1-1\">\n      <h5>\n        Платформа <strong>.NET</strong> сейчас\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={dotnetPlatform} alt=\"dotnet-platform\" />\n      <div className=\"columns text-center\" style={{\n            \"display\": \"none\"\n          }}>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Framework</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-2\">WPF</div>\n                <div className=\"column col-7\">Windows Forms</div>\n                <div className=\"column col-3\">ASP.NET</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Core</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-6\">UWP</div>\n                <div className=\"column col-6\">ASP.NET Core</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>Xamarin</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-6\">iOS</div>\n                <div className=\"column col-6\">Android</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-12\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Standard Library</strong>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-12\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>Common infrastructure</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-4\">Compilers</div>\n                <div className=\"column col-4\">Languages</div>\n                <div className=\"column col-4\">Runtime components</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <p>Пути создания .NET-приложений:</p>\n      <ol>\n        <li><strong>.NET Framework</strong> — разработка под Windows настольных приложений на <strong>Windows Forms</strong>, <strong>WPF</strong>, веб-серверов на <strong>ASP.NET</strong> и <strong>WCF</strong></li>\n        <li><strong>.NET Core</strong> — разработка кроссплатформенных веб-приложений с помощью <strong>ASP.NET Core</strong>, создание гибридных приложений с помощью <strong>Universal Windows Platform</strong>, которая позволяет запускать программу, написанную на этой технологии, на Windows-машине, Xbox, Hololens</li>\n        <li><strong>Xamarin</strong> — платформа для создания мобильных приложений для <strong>iOS</strong> и <strong>Android</strong>, используя C#, XML и XAML</li>\n      </ol>\n      <p>Код, написанный под специальный фреймворк, такой как WPF, ASP.NET Core или Android, нельзя переиспользовать на другой платформе, потому что он заточен для работы с так называемыми <em>platform-specific API</em>, который отличается у всех. Чтобы можно было повторно использовать код бизнес-логики, хелпер-методов, моделей, классов и т.д. был создан <strong>.NET Standard</strong>. Он предоставляет набор доступных АPI, которые одинаково работают во всех десктопных программах, веб-серверах, мобильных приложениях, играх и облачных службах вне зависимости от операционной системы и платформы.</p>p\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-1-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-1-2\">\n      <h5>\n        Платформа <strong>.NET 5</strong>\n      </h5>\n    </label>\n    <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={dotnet5Platform} alt=\"dotnet5-platform\" className=\"top-image\" />\n      <p>В ноябре 2020 года компания Microsoft выпустила платформу <strong>.NET 5</strong>, которая стала серьезным улучшением системы разработки в целом.\n         Главным нововведением по сравнению с <strong>.NET Framework 4.8</strong>, стало обеспечение поддержки <strong>Linux</strong>, <strong>macOS</strong>, <strong>iOS</strong>, <strong>Android</strong>, <strong>tvOS</strong>, <strong>watchOS</strong> и <strong>WebAssembly</strong>. \n         При этом версия Framework 4.8 стала последней, дальше развиваться будет только семейство .NET <em>x</em>. \n         Это позволило унифицировать платформу и предложить единственный открытый фреймворк и <em>runtime</em> для различных задач. В результате можно создавать приложения для различных платформ на общей кодовой базе с одинаковым процессом сборки независимо от типа программы.\n         И разрабатывать можно с помощью <strong>Visual Studio</strong>, <strong>Visual Studio for Mac</strong>, <strong>Visual Studio Сode</strong> ― на чем угодно.\n      </p>\n      <p>А уже на ноябрь 2021 года запланирован релиз <strong>.NET 6.</strong></p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-1-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-1-3\">\n      <h5><strong>NuGet</strong></h5>\n    </label>\n    <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={nugetLogo} alt=\"nuget-logo\" className=\"top-image\" />\n      <p>Каждому программисту рано или поздно приходится имплементировать функционал, который частично или полностью кто-то уже создал и даже опубликовал (как правило в виде <i>DLL библиотеки</i>). Разработчики называют такие модули «пакетами», в которые собран скомпилированный код, дополнительные файлы-ассеты и манифест, объясняющий цель и способ использования пакета. В большинстве языков программирования есть собственные платформы для обмена такими полезными модулями. В .NET это <strong>NuGet</strong>, поддерживаемый Microsoft-ом. Разработчики, которые создали крутой инструмент или, например, библиотеку для работы с файловой системой, могут опубликовать свою работу как <strong>NuGet-пакет</strong> в виде <em>zip-файла</em> з расширением <strong>.nupkg</strong>. Вы можете искать и скачивать модули, которые ускорят разработку вашего приложения, из центрального репозитория <strong>NuGet Gallery</strong> ― он насчитывает уже около 250 000 уникальных пакетов и там может найтись что-то полезное.</p>\n    </div>\n  </li>\n    </ul>\n    <Level id=\"dotnet-under-the-hood\" number=\"2\" name=\".NET под капотом\" difficulty={<span style={{\n      color: \"orangered\",\n      fontWeight: \"bold\"\n    }}>Hard as hell 🔥</span>} objectives=\"Понять SDK.\" labels={{\n      level: \"Раздел\",\n      backToTop: \"Наверх\",\n      difficulty: \"Сложность:\",\n      objectives: \"Цель:\"\n    }} mdxType=\"Level\" />\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-1\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"marginRight\": \"0.25em\"\n            }}><strong>CLR</strong></span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          Common Language Runtime\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Сегодня в .NET-мире самые распространенные языки программирования - это <strong>C#</strong>, <strong>F#</strong> и <strong>Visual Basic</strong>.\n      У каждого есть свой компилятор, который преобразует код, написанный на этом языке, в <strong>Intermediate Language Code (IL)</strong>. Последний представляет собой набор инструкций для виртуальной машины .NET — <strong>CLR (Common Language Runtime)</strong>.</p>\n      <p>Основные этапы выполнения программы .NET:</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-2-1-1\" />\n          <label className=\"summary\" htmlFor=\"accordion-2-1-1\">\n            Сначала компилятор превратит написанный код из C# в IL:\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                Обычный C# код\n                <div>\n                  <SnippetL02S01 mdxType=\"SnippetL02S01\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                C# код, скомпилированный в IL\n                <div>\n                  <SnippetL02S02 mdxType=\"SnippetL02S02\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </li>\n        <li>А когда придет время для выполнения части кода в программе, CLR с помощью <strong>JIT (Just in Time)</strong> компилятора превратит код IL в машинный код.</li>\n      </ul>\n      <p>Результатом билда .NET-программы является файл с расширением <strong>.exe</strong> (Executable) или <strong>.dll</strong> (Dynamic Link Library).</p>\n      <div className=\"bubble small subtle\">\n        <p>Важно отметить, что при преобразовании IL в машинный код будет преобразована только та часть кода, которая должна выполниться в текущий момент времени.</p>\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-2\">\n      <h5><strong>Value</strong> and <strong>Reference</strong> types</h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>На высшем уровне в C# есть 2 типа данных — <strong>это значимые типы (value types)</strong> и <strong>ссылочные типы (reference types)</strong>. Важно понимать различия между ними:</p>\n      <div className=\"columns\">\n        <div className=\"column col-6\">\n          Значимые типы:\n          <ul>\n            <li>Целочисленные типы</li>\n            <li>Типы с плавающей точкой</li>\n            <li>decimal</li>\n            <li>bool</li>\n            <li>enum-ы</li>\n            <li>структуры</li>\n          </ul>\n        </div>\n        <div className=\"column col-6\">\n          Ссылочные типы:\n          <ul>\n            <li>тип object</li>\n            <li>string</li>\n            <li>классы</li>\n            <li>интерфейсы</li>\n            <li>делегаты</li>\n          </ul>\n        </div>\n      </div>\n      <p>Значимые типы хранятся в стеке, ссылочные — в куче. <strong>Value types</strong> передаются по значению, то есть копируются, <strong>reference types</strong> передаются по ссылке.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-3\">\n      <h5><strong>Stack</strong> and <strong>Heap</strong></h5>\n    </label>\n    <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={stackAndHeap} alt=\"stack-and-heap\" className=\"top-image\" />\n      <p>В <strong>.NET</strong> память делится на два типа: <strong>стек</strong> и <strong>кучу</strong>.\n      <strong> Стек</strong> представляет собой структуру данных, которая растет снизу вверх: каждый новый элемент размещается поверх предыдущего.\n      В стеке хранятся <em>значимые типы</em> и <em>ссылки на ссылочные типы</em>, которые, в свою очередь хранятся в куче.</p>\n      <p><strong>Кучу</strong> можно представить как неупорядоченный набор разнородных объектов.\n      При создании объекта <em>ссылочного типа</em> в стек добавляется ссылка на адрес этого объекта в <strong>куче</strong>.\n      Когда объект <em>cсылочного типа</em> перестает использоваться, то ссылка удаляется из стека, и память освобождается.</p>\n      <p>В .NET-е очистка памяти происходит автоматически. За это отвечает <strong>Garbage Collector</strong> (по нашему — сборщик мусора). Когда он видит, что на объект в куче больше нет ссылок, он удаляет этот объект и очищает память.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-4\">\n      <h5><strong><code>ref</code></strong> and <strong><code>out</code></strong> parameters</h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Важный момент в том, как переменные <em>значимых</em> и <em>ссылочных типов</em> передаются в метод.</p>\n      <div className=\"columns\">\n        <div className=\"column col-6\">\n          <h3>Value Type</h3>\n          <div>\n            <SnippetL02S03 mdxType=\"SnippetL02S03\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h3>Reference Type</h3>\n          <div>\n            <SnippetL02S06 mdxType=\"SnippetL02S06\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h3>Ref</h3>\n          <div>\n            <SnippetL02S04 mdxType=\"SnippetL02S04\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h3>Out</h3>\n          <div>\n            <SnippetL02S05 mdxType=\"SnippetL02S05\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-5\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-5\">\n      <h5><strong>Boxing</strong> / <strong>Unboxing</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Операция упаковки — <strong>boxing</strong> — это выделение памяти в куче под объект значимого типа — value type, и присваивание ссылки на эту область памяти переменной в стеке. Распаковка — <strong>unboxing</strong>, наоборот выделяет память в стеке под объект, полученный из кучи по ссылке.</p>\n      <div className=\"paralell-blocks\">\n        <SnippetL02S07 mdxType=\"SnippetL02S07\" />\n        <img src={boxingUnboxing} alt=\"boxing-unboxing\" />\n      </div>\n    </div>\n  </li>\n    </ul>\n    <Level id=\"csharp-essential-topics\" number=\"3\" name=\"Самые вежные темы C#\" difficulty=\"Ну так себе.\" objectives=\"Понять SDK.\" labels={{\n      level: \"Раздел\",\n      backToTop: \"наверх\",\n      difficulty: \"Сложность:\",\n      objectives: \"Цель:\"\n    }} mdxType=\"Level\" />\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-1\">\n      <h5><strong>Class vs Struct</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><strong>Структуры</strong> по виду очень похожи на <strong>Классы</strong>, но существует принципиальное отличие, которое упоминалась ранее. <span style={{\n              \"textDecoration\": \"underline\"\n            }}>Класс</span> — это <strong>reference type</strong> и передается по ссылке, а <span style={{\n              \"textDecoration\": \"underline\"\n            }}>структура</span> — <strong>value type</strong> и передается по значению — то есть, копируется.</p>\n      <p><em>Структуры</em> лучше использовать для небольших классов, маленьких структур данных и нетяжелых объектов. <em>Классы</em> же можно использовать во всех случаях, где вам неудобно использовать структуру. Они отлично подходят для того, чтобы быть частью иерархии сущностей, иметь внутреннее состояние и содержать в себе большое количество бизнес логики.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-2\">\n      <h5><strong>Static members</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Классы и структуры могут иметь <em>статические поля</em>, <em>методы</em> и <em>свойства</em>. Если член статический, то он относится ко всему классу или структуре и для обращения к нему не нужно создавать экземпляр.</p>\n      <SnippetL03S01 mdxType=\"SnippetL03S01\" />\n      <p>На примере показано, что <em>статическое поле</em> является общим для всех объектов класса и может использоваться в <em>нестатических методах</em>. В то же время в <em>статических методах</em> у нас нет доступа к <em>нестатическим членам</em> класса.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-3\">\n      <h5><strong>Params</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Используя ключевое слово <code>params</code> мы можем «сказать», что наш метод принимает неопределенное количество параметров — это может быть ноль или больше, любое количество.</p>\n      <SnippetL03S02 mdxType=\"SnippetL03S02\" />\n      <p>Когда у метода переменное количество параметров, мы передаем аргументы ему просто перечисляя их через запятую, как показано на примере. Стоит отметить, что аргумент <code>params</code> должен быть указан последним, после перечня всех строго определенных аргументов метода.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-5\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-5\">\n      <h5><strong>Interface vs Abstract Class</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>В C# <em>абстракция</em> используется для сокрытия деталей реализации. \n      Это значит, что мы сосредотачиваемся на том, что объект может делать, а не на том, как он это делает. Это часто используется при написании больших и сложных программ.\n      Основные инструменты для этого — <em>абстрактные классы</em> и <em>интерфейсы</em>.</p>\n      <p>В <em>абстрактном классе</em> мы можем <strong>создать функционал, который реализуется в унаследованном от него классе.</strong>. \n      Со своей стороны <em>интерфейс</em> позволяет <strong>определить функциональные возможности или функции, но не может их реализовать.</strong>.</p>\n      <p>Класс имплементирует интерфейс и обязательно реализует эти методы.\n      Рассмотрим несколько ключевых различий между ними:</p>\n      <ol>\n        <li>\n          У <em>интерфейса</em> не может быть модификаторов доступа к членам — все что есть в <em>интерфейсе</em> является публичным по дефолту. У абстрактного класса все остается, как и у обычного класса.\n          <div className=\"columns\">\n            <div className=\"column col-6\">\n              <SnippetL03S03 mdxType=\"SnippetL03S03\" />\n            </div>\n            <div className=\"column col-6\">\n              <SnippetL03S04 mdxType=\"SnippetL03S04\" />\n            </div>\n          </div>\n        </li>\n        <li>\n          В <em>интерфейсе</em> мы можем только описать сигнатуру метода без его имплементации. А в <em>абстрактном классе</em> могут находиться как абстрактные методы и свойства, так и не абстрактные — с полной или частичной реализацией.\n          <div className=\"columns\">\n            <div className=\"column col-6\">\n              <SnippetL03S05 mdxType=\"SnippetL03S05\" />\n            </div>\n            <div className=\"column col-6\">\n              <SnippetL03S06 mdxType=\"SnippetL03S06\" />\n            </div>\n          </div>\n        </li>\n        <li>\n          Мы не можем объявить конструктор в теле <em>интерфейса</em> ни с модификатором доступа, ни без него. В <em>абстрактном классе</em> мы можем объявлять конструкторы по тем же правилам, что и в обычных классах. Он в основном используется для вызова в конструкторе <em>производного класса</em>, чтобы не дублировать код инициализации полей или свойств <em>абстрактного класса</em>.\n          <div className=\"columns\">\n            <div className=\"column col-6\">\n              <SnippetL03S07 mdxType=\"SnippetL03S07\" />\n            </div>\n            <div className=\"column col-6\">\n              <SnippetL03S08 mdxType=\"SnippetL03S08\" />\n            </div>\n          </div>\n        </li>\n        <li>\n          Мы не можем явно создать инстанс <em>интерфейса</em> или <em>абстрактного класса</em> вызвав конструктор. Хотя напомню, что у <em>абстрактного класса</em> он может быть.\n          <SnippetL03S09 mdxType=\"SnippetL03S09\" />\n        </li>\n        <li>\n          У <em>абстрактного класса</em> могут быть поля и свойства, у <em>интерфейса</em> — только свойства.\n          <div className=\"columns\">\n            <div className=\"column col-6\">\n              <SnippetL03S10 mdxType=\"SnippetL03S10\" />\n            </div>\n            <div className=\"column col-6\">\n              <SnippetL03S11 mdxType=\"SnippetL03S11\" />\n            </div>\n          </div>\n        </li>\n      </ol>\n      <h6>What, why and where?</h6>\n      <p><strong>Интерфейс</strong> мы используем для описания <strong>API</strong> для нескольких классов, которые, скорее всего, будут реализовывать более чем один интерфейс. Надо помнить, что члены интерфейса не могут быть статическими. <em>С#</em>, в отличие от <em>С++</em>, не поддерживает множественное наследование, поэтому чтобы его реализовать, мы используем интерфейсы.</p>\n      <p><strong>Абстрактный класс</strong> используется, если мы хотим включить его в иерархию наследований и создать функционал с полной или частичной реализацией, которую класс-наследник может имплементировать или переопределить. <em>Абстрактный класс</em> позволяет сохранять состояние класса в целом, а не только отдельного его объекта.</p>\n      <p><em>Интерфейс</em> в основном используется тогда, когда мы хотим просто описать <strong>API</strong> использования классов, которые будут имплементировать этот интерфейс — задать поведение.</p>\n    </div>\n  </li>\n   <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-IDisposable\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-IDisposable\">\n      <h5><strong>Интерфейс IDisposable</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><code>IDisposable</code> объявляет единственный метод <code>Dispose</code>, в котором при имплементации интерфейса в классе должно происходить освобождение неуправляемых ресурсов, таких как соединения с базой данных, файловые дескрипторы, сетевые подключения и тому подобное. \n         Неуправляемые ресурсы нужно освобождать как можно быстрее, еще до удаления объекта из памяти когда до него доберется <em>Garbage Collector</em>.\n         Например, наш класс взаимодействует с файловой системой — открывает файл, читает что-то из него, записывает. И лучше как можно раньше закончить работу с этим файлом, чтобы другие программы или потоки могли его использовать.\n         И еще такое, нам самим нужно явно вызывать метод <code>Dispose</code>, потому что <em>Garbage Collector</em> ничего о нем не знает. Это лучше всего делать в блоке <code>try...finally</code>, чтобы даже если возникнет ошибка, мы смогли освободить ресурсы и правильно очистить память.\n      </p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-IDisposable-example\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-IDisposable-example\">\n            Пример имплементации IDisposable\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S31 mdxType=\"SnippetL03S31\" />\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-7\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-7\">\n      <h5><strong>Extension methods</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><em>Extension методы</em> позволяют «добавлять» методы в существующие типы без создания нового производного типа, перекомпиляции или модификации оригинального типа.\n      <em>Extension метод</em> это особый <em>статический метод</em>, который обязательно должен быть членом статического класса.</p>\n      <SnippetL03S14 mdxType=\"SnippetL03S14\" />\n      <p>На примере показан <em>Extension метод</em> для типа <code>String</code>. <em>Статический класс</em> может иметь произвольное название, в то время как название метода должно отличаться от уже существующих методов в классе, который мы расширяем, или иметь другую сигнатуру.\n      В дальнейшем мы можем использовать объявленный нами метод так же как и обычные методы класса, который мы расширяем.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-8\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-8\">\n      <h5><strong>Generics</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><strong>Дженерики</strong> появились в <strong>C# 2.0</strong>. Они привнесли в <strong>.NET</strong> концепт <em>типизированных параметров</em> ― это позволяет проектировать классы и методы, которые определяют тип членов класса или метода только при инициализации.</p>\n      <p>Например, используя общий параметр типа <code>Т</code>,мы можем написать единственный класс, который будет использоваться клиентским кодом без риска осуществления <em>boxing-операций</em> (которые сами по себе являются тяжелыми операциями, и злоупотреблять ими не есть хорошо).</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Generic-example\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Generic-example\">\n            Пример объявления <code>Generic</code> класса\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S15 mdxType=\"SnippetL03S15\" />\n            <p>Как видно по приведенному выше коду, <code>MyGenericClass</code> определен с <code>&lt;T&gt;</code>. <code>&lt;T&gt;</code> указывает на то, что <code>MyGenericClass</code> является дженериком, и тип <code>Т</code> будет определен позже. Вы можете использовать любые буквы или слово вместо <code>T</code>, это не имеет значения.</p>\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Generic-example-2\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Generic-example-2\">\n            Пример создания экземпляра <code>Generic</code> класса\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S16 mdxType=\"SnippetL03S16\" />\n            <p>Теперь компилятор определяет тип членов класса на основе типа, переданного программистом при создании класса. Например, следующий код использует тип данных <code>int</code>.</p> \n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Generic-сonstraints\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Generic-сonstraints\">\n            Ограничения в <code>Generic</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>В C# есть <em>Constraint</em>-ы чтобы ограничивать типы, которые можно было бы использовать в дженерик классе. Например, если через <em>Constraint</em> мы указываем что типом <code>Т</code> может быть только <em>reference type</em>, то есть классы, то мы не сможем использовать <em>value type</em> для создания экземпляра дженерик класса.\n            Соответственно после этого мы не можем использовать структурные типы, такие как <code>int</code> — это вызовет ошибку компиляции.</p>\n            <SnippetL03S17 mdxType=\"SnippetL03S17\" />\n          </div> \n        </li>\n         <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Generic-all-сonstraints\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Generic-all-сonstraints\">\n            Все <code>Generic</code> ограничения\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>Здесь собраны все возможные <em>Constraint</em>-ы, которыми можно ограничивать типы для использования в дженерик классах:</p>\n            <img src={constraintsTypes} alt=\"constraints-types\" />\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-4\">\n      <h5><strong>Nullable</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Явно <em>структурному типу данных</em> мы не можем присвоить значения<code>null</code>. Чтобы это сделать, нам нужно объявить переменную с модификатором <code>?</code>. Этот модификатор является <em>алиасом</em> структуры <code>Nullable&lt;T&gt;</code></p>\n      <SnippetL03S18 mdxType=\"SnippetL03S18\" />\n      <p>Сигнатура <code>Nullable&lt;T&gt;</code>:</p>      \n      <SnippetL03S19 mdxType=\"SnippetL03S19\" />\n      <p>Когда мы оборачиваем переменную в <code>Nullable</code> тип, у нас появляется новый <strong>АРІ</strong> для взаимодействия с этой переменной:</p>\n      <ul>\n        <li>Свойство <code>HasValue</code>, возвращает <code>true</code>, если в переменной есть значение, и <code>false</code>, если она равна <code>null</code></li>\n        <SnippetL03S20 mdxType=\"SnippetL03S20\" />\n        <li><code>Value</code> возвращает реальное значение, хранящееся в переменной, если <code>HasValue</code> равняется <code>true</code>. В противном случае <code>Value</code> выбрасывает <code>InvalidOperationException</code>, если переменная <code>null</code>.</li>\n      </ul>  \n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-10\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-10\">\n      <h5><strong>Events & Delegates + Lambdas</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><strong>Делегаты</strong> — это объекты, которые указывают на методы; с помощью них мы можем вызывать методы, присвоенные делегату. Делегаты позволяют представлять методы в виде объектов и передавать их в функции, использовать как <em>колбеки</em>.</p>\n      <p><strong>События</strong> — это объекты типа делегат, которые сообщают о том, что произошло какое-то событие (<em>action</em>).</p>\n      <p><strong>Лямбда-выражения</strong> — представляют собой упрощенную запись <em>анонимных методов</em>. Это позволяет создавать лаконичные методы, которые могут возвращать какое-то значение.</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Lambdas\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Lambdas\">\n            Синтаксис лямбда-выражений\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <img src={lambdaExpressionStructure} alt=\"lambdaExpressionStructure\" />\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Delegates\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Delegates\">\n            Пример использования делегата\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S21 mdxType=\"SnippetL03S21\" />      \n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Action\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Action\">\n            <code>Action</code>, <code>Func</code> и <code>Predicate</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>Вместо определения нового типа делегата можно использовать уже определены делегаты <em>Action</em>, <em>Func</em> и <em>Predicate</em>.</p>\n            <ul>\n                <li>Дженерик делегат <em>Action &lt;T&gt;</em> предназначен для ссылки на метод, который возвращает <code>void</code>. Классу этого делегата можно передавать до 16 параметров произвольного типа.\n                <SnippetL03S22 mdxType=\"SnippetL03S22\" />\n                </li>\n                <li>Делегаты <em>Func</em> могут использоваться аналогичным образом. Func позволяет вызывать методы, которые что-то возвращают. Ему так же можно передавать до 16 типов параметров и 1 тип, который он возвращает.\n                <SnippetL03S23 mdxType=\"SnippetL03S23\" />\n                </li>\n                <li>Делегат <em>Predicate</em> используется для сравнения соответствия некоторого объекта <em>T</em> определенному условию. Он возвращает <code>true</code>, если объект удовлетворяет условию, и <code>false</code>, если нет.\n                <SnippetL03S24 mdxType=\"SnippetL03S24\" />\n                </li>\n            </ul>\n          </div> \n        </li>\n         <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Events\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Events\">\n            Events & Delegates Flow\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <img src={delegateEventFlow} alt=\"delegateEventFlow\" />\n            <p><strong>События</strong> позволяют сообщать системе о том, что произошло определенное действие.</p>\n            <p>Существует такая модель: <strong>Publisher-Subscriber</strong><em>(Издатель-подписчик)</em>. <em>Подписчик</em> подписывается на событие, определяет обработчик и ждет пока <em>Издатель</em> выполнит это событие, чтобы его вызвать.</p>       \n            <p>Пример использования событий и делегатов вы сможете найти <a href=\"https://github.com/binary-studio-academy/stage-2-dotnet-ecosystem-and-csharp-best-practices\"><strong>здесь</strong></a>.</p>\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-11\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-11\">\n      <h5><strong>Collections</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>В C# Есть <em>массивы</em>, которые хранят в себе <em>наборы однотипных объектов</em>, но работать с ними не всегда удобно. Так как массив хранит <em>фиксированное количество объектов</em>, в случаях, когда мы заранее не знаем, сколько у нас их будет, гораздо удобнее будет применять <em>коллекции</em>.</p>\n      <p>При выборе коллекций определяющую роль может сыграть то, что некоторые из них реализуют стандартные структуры данных, такие как:</p>\n      <ul>\n          <li>стек</li>\n          <li>очередь</li>\n          <li>словарь</li>\n          <li>хэш-таблица</li>\n      </ul>\n      <p>...которые могут пригодиться для решения различных специальных задач. Основой для создания всех коллекций является реализация интерфейсов <code>IEnumerator</code> и <code>IEnumerable</code>.</p>\n      <p>Интерфейс <code>IEnumerator</code> представляет <em>перечислитель</em>, который делает возможным последовательный перебор коллекции, например в цикле <code>foreach</code>, или средствами <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\">LINQ</a>. А интерфейс <code>IEnumerable</code> через свой метод <code>GetEnumerator</code> предоставляет перечислитель всем классам, которые реализуют данный интерфейс. Поэтому интерфейс <code>IEnumerable</code> является базовым для всех коллекций.</p>\n      <p>Конкретные методы и способы использования могут отличаться от одного класса коллекции к другому, но общие принципы будут одними и теми же для всех классов коллекций.</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Collections-Hierarchy\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Collections-Hierarchy\">\n            Collections Hierarchy\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <img src={collectionsHierarchy} alt=\"collectionsHierarchy\" />\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-ArrayList\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-ArrayList\">\n            ArrayList & List\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>В приведенном примере используются две коллекции: <strong>non-generic</strong> — <code>ArrayList</code>, и <strong>generic</strong> — <code>List</code>. Сейчас хорошей практикой считается использовать дженерик версии коллекций везде, где это только возможно — из-за строгой типизации и удобства в использовании. Большинство коллекций поддерживают добавление элементов.</p> \n            <SnippetL03S25 mdxType=\"SnippetL03S25\" />\n            <p>Например, в данном случае добавление производится с помощью метода <code>Add</code>, но для других коллекций название метода может отличаться. Также большинство коллекций реализуют удаление (в данном примере производится с помощью метода <code>RemoveAt</code>, который удаляет элемент из коллекции по индексу). С помощью свойства <code>Count</code> можно посмотреть количество элементов в коллекции.</p>\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Stack\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Stack\">\n            Stack\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p><code>Stack&lt;T&gt;</code> представляет коллекцию, которая использует алгоритм <strong>LIFO</strong> — last in — first out — (\"последним пришел - первым вышел\"). При такой организации данных каждый следующий элемент помещается поверх предыдущего. Получение элементов из коллекции происходит в обратном порядке — извлекается тот элемент, который находится выше всех в стеке.</p> \n            <img src={stack} alt=\"stack\" />\n            <p>В классе <code>Stack</code> можно выделить два основных метода, которые позволяют управлять элементами - это:</p>\n            <ul>\n              <li><code>Push</code>: добавляет элемент в стек на первое место</li>\n              <li><code>Pop</code>: получает первый элемент из стека</li>\n              <li><code>Peek</code>:* просто возвращает первый элемент из стека без его удаления</li>\n            </ul>\n            <SnippetL03S32 mdxType=\"SnippetL03S32\" />\n            <div className=\"bubble medium subtle\">На примере можно увидеть как мы создаем экземпляр коллекции стека лент. Добавляем 3 города — \"Lviv\", \"Kyiv\", \"Odessa\" с помощью метода <code>Push</code>. Вытаскиваем элемент который мы добавили последним с помощью метода <code>Pop</code> и выводим результаты на экран.</div>\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Dictionary\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Dictionary\">\n            Dictionary\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p><code>Dictionary</code> <em>(словарь)</em> сохраняет объекты, которые представляют пару ключ-значение. Его очень удобно использовать чтобы организовать соответствие чего-то чему-то.</p> \n            <p>Каждый такой объект является экземпляром структуры <code>KeyValuePair&lt;TKey, TValue&gt;</code>. Благодаря свойствам <code>Key</code> и <code>Value</code>, которые есть у этой структуры, мы можем получить ключ и значение элемента в словаре.</p>\n            <SnippetL03S26 mdxType=\"SnippetL03S26\" />\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-9\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-9\">\n      <h5><strong>Tuples</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Если вам нужно склеить два значения, чтобы вернуть их функции или поместить два значения в <em>хэш-набор</em>, вы можете использовать типы <code>System.ValueTuple</code></p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Tuples-1\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Tuples-1\">\n            Пример использования кортежа\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S27 mdxType=\"SnippetL03S27\" />\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Tuples-2\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Tuples-2\">\n            Разные сценарии использования кортежей\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S28 mdxType=\"SnippetL03S28\" />\n            <ol>\n              <li>Создание кортежа</li>\n              <li>Использование кортежа для типизирования <code>Dictionary</code></li>\n              <li>Добавление элементов кортежа в <code>Dictionary</code></li>\n              <li>Возвращение значения словаря по ключу</li>\n              <li>Деструктуризация элемента кортежа</li>\n              <li>Доступ к членам кортежа по имени</li>\n            </ol>\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-12\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-12\">\n      <h5><strong>Exceptions</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Иногда при выполнении программы возникают ошибки, которые трудно или невозможно предусмотреть (например, при передаче файла по сети может оборваться подключение пропасть интернет). Такие ситуации называются <strong>Exception</strong>-ами. Язык C# предоставляет разработчикам возможности для обработки таких ситуаций с помощью конструкции <code>try...catch...finally</code></p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-try-catch-finally\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-try-catch-finally\">\n            Пример использования <code>try...catch...finally</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S29 mdxType=\"SnippetL03S29\" />\n            <ol>\n              <li>При использовании блока <code>try...catch...finally</code> сначала выполняются все инструкции в блоке <code>try</code>.</li>\n              <li>Если в этом блоке не возникло <em>Exception</em>-ов, то после него исполнится блок <code>finally</code> и конструкция <code>try..catch..finally</code> завершит свою работу.</li>\n              <li>Если же в блоке <code>try</code> возникает <em>Exception</em>, то обычный поток выполнения останавливается, и CLR начинает искать блок <code>catch</code>, который может обработать этот <em>Exception</em>.</li>\n              <li>Если блок <code>catch</code> найден, то он выполняется, а после его завершения исполнится блок <code>finally</code>.</li>\n              <li>Если нужный блок <code>catch</code> не найден, то программа аварийно завершает свое выполнение.</li>\n            </ol>\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Exceptions-Hierarchy\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Exceptions-Hierarchy\">\n            <code>Exceptions</code> Hierarchy\n          </label>\n          <div className=\"details-body details-body-with-image\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>В C # все типы <em>Exception</em>-ов наследуются от родительского класса <code>Exception</code>, который дополнительно делится на две ветви <code>SystemException</code> и <code>ApplicationException</code>.</p>\n            <p><code>SystemException</code> — это базовый класс для всех ошибок <em>CLR</em> или программного кода, таких как <code>DivideByZeroException</code> или <code>NullReferenceException</code> и так далее.</p>\n            <img src={exceptionClassHierarchy} alt=\"exceptionClassHierarchy\" className=\"bottom-image\" />\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Application-Exception\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Application-Exception\">\n            <code>Application Exception</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p><code>ApplicationException</code> используется для исключений, связанных с приложением. Такой тип исключений очень удобно использовать для создания своих кастомных <em>Exception</em>-ов. Для этого надо просто наследоваться от класса <code>Exception</code> и добавить туда то, что вы хотите. Далее в этом классе можно определять дополнительные поля, свойства, методы и тд.</p>\n            <SnippetL03S30 mdxType=\"SnippetL03S30\" />\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Exception-properties\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Exception-properties\">\n            <code>Exception</code> properties\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <div className=\"sl-block is-focused\" data-block-type=\"text\">\n              <div className=\"sl-block-content\" data-placeholder-tag=\"p\" data-placeholder-text=\"Text\">\n                <table>\n                \t<tbody>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.data#System_Exception_Data\">Data</a></td>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.idictionary\">IDictionary</a>, содержащий данные в парах ключ-значение.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.helplink#System_Exception_HelpLink\">HelpLink</a></td>\n                \t\t\t<td>Может содержать URL (или URN) к файлу справки, которая предоставляет исчерпывающую информацию о причине возникновения ошибки.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.innerexception#System_Exception_InnerException\">InnerException</a></td>\n                \t\t\t<td>Это свойство может использоваться для создания и сохранения цепи ошибок при обработке <em>Exception</em>-a. Вы можете использовать его для создания нового исключения, которое содержит предварительные <em>Exception</em>-ы.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.message#System_Exception_Message\">Message</a></td>\n                \t\t\t<td>Предоставляет подробную информацию о причине исключения.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.source#System_Exception_Source\">Source</a></td>\n                \t\t\t<td>Содержит название программы или объекта, в котором возникла ошибка.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.stacktrace#System_Exception_StackTrace\">StackTrace</a></td>\n                \t\t\t<td>Содержит <em>stack trace</em> который можно использовать, чтобы определить, где возникла ошибка. <em>Stack trace</em> включает название исходного файла и номер строки программы, если доступна <em>debug информация</em>.</td>\n                \t\t</tr>\n                \t</tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-throw\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-throw\">\n            <code>throw</code> it away!\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>После оператора <code>throw</code> указывается объект <code>Exception</code>-a, в конструктор которого мы можем передать сообщение об ошибке. Вместо общего типа <em>Exception</em> мы можем указать объект любого другого типа <code>Exception</code>.</p>\n            <SnippetL03S33 mdxType=\"SnippetL03S33\" />\n            <p>Подобным образом мы можем генерировать <code>Exception</code>-ы в любом месте программы. Но существует также и другая форма использования оператора <code>throw</code>, когда после этого оператора ничего не указывается.</p>\n            <SnippetL03S34 mdxType=\"SnippetL03S34\" />\n            <p>В таком виде оператор throw может использоваться только в блоке <code>catch</code>. Разница между ними в том, что <code>throw</code> без ничего сохраняет первоначальный <code>stack trace</code>, в то время как <code>throw ех</code> сбрасывает <code>stack trace</code> к методу, в котором сейчас происходит обработка <code>Exception</code>-у.</p>\n          </div>\n        </li>\n      </ul>\n      <p>Пример обработки исключительных ситуаций вы можете найти <a href=\"https://github.com/binary-studio-academy/stage-2-dotnet-ecosystem-and-csharp-best-practices\"><strong>тут</strong></a>.</p>\n    </div>\n  </li>\n    </ul>\n    <Level id=\"clean-code-principles\" number=\"4\" name=\"Принципы чистого кода\" difficulty=\"Семь раз отмерь, один раз отрежь.\" objectives=\"Понять, как писать такой код, который захочется читать.\" labels={{\n      level: \"Раздел\",\n      backToTop: \"Наверх\",\n      difficulty: \"Сложность:\",\n      objectives: \"Цель:\"\n    }} mdxType=\"Level\" />\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-1\">\n      <h5><strong>Coding Standards and <code>Naming Conventions</code></strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>В переводе на человеческий язык — общепринятые стандарты написания кода и согласованные правила, как называть переменные, функции и др. Это — грамматика и орфография C#, принятая большинством .NET-разработчиков для того, чтобы другие девелоперы <em>(вы через Х времени)</em> могли легко и быстро понять, что происходит в вашем коде и использовать его, не путаясь во всех возможных способах назвать, скажем, аргумент <em>(и такие правила написания есть абсолютно во всех языках программирования, не только в C#)</em>. Долго рассказывать о каждом из правил нет смысла, главное для вас — самостоятельно ознакомиться со <a href=\"https://www.dofactory.com/reference/csharp-coding-standards\">списком большинства распространенных стандартов C#</a>.</p>\n      <div className=\"bubble small subtle\">\n        Хотите быть цивилизованным разработчиком и заслужить уважение среди коллег — прочтите несколько абзацев с примерами правильно оформленного кода и придерживайтесь такого формата, выполняя таски малые или большие.\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-2\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"marginRight\": \"0.25em\"\n            }}>DRY</span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          Don't Repeat Yourself\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><strong>Не повторяйся</strong> при написании кода = не прописывай несколько раз то, что можно закодить один раз, и вызывать, обращаясь к конкретному модулю. Пример — веб-приложение, содержащее несколько одинаковых по оформлению блоков, где каждый имеет собственное <em>(ідентичний іншим!)</em> описание стилей. Какова вероятность, что когда нужно будет сделать одинаковую правку во всех этих блоках <em>(вручную, ведь мы несколько раз повторяем тот же набор стилей)</em>, разработчик пропустит один или несколько из них? Когда этот принцип нарушен и имплементация метода или даже класса дублируется без настоящей потребности, а написано несколько сотен тысяч строк кода (как на любом реальном проекте), то для рефакторинга, изменения бизнес-логики или даже простых изменений в интерфейсе, приходится долго искать по имени метода несчастный кусок кода, часто для того, чтобы поменять в нем только 1 цифру.</p>\n      <div className=\"bubble small subtle\">\n        Короче, так не делается 😐. Чтобы достичь <strong>DRY</strong> в вашем коде — делите его на маленькие кусочки; видите что часть логики повторяется — сразу выносите, объединяйте функции. Почему нужен DRY? Чем меньше кода, тем лучше. Его легче поддерживать, меньше времени уходит на то, чтобы в нем разобраться, и также уменьшается количество багов.\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-3\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"marginRight\": \"0\"\n            }}><strong>KISS<sup>💋</sup></strong></span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          Keep It Simple Stupid\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Этот принцип говорит сам за себя — простой и лаконичный код легче понять другим разработчикам и тебе, когда ты вернешься к нему через некоторое время. Он формулируется так — «каждый метод должен решать только одну маленькую проблему, а не иметь много различных средств потребления». Если в методе много условий, то разбейте их на меньшие методы. Такой код легче читать, поддерживать, и это также помогает находить ошибки гораздо быстрее. Чтобы продемонстрировать <strong>KISS</strong>, чаще всего приводят пример с определением дня недели:</p>\n      <div className=\"columns\">\n        <div className=\"column col-6\">\n          <h6><strong>Simple</strong></h6>\n          <div>\n            <SnippetL04S01 mdxType=\"SnippetL04S01\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h6><strong>Stupid</strong></h6>\n          <div>\n          <SnippetL04S02 mdxType=\"SnippetL04S02\" />\n          </div>\n        </div>\n      </div>\n      <div className=\"bubble small subtle\">\n        На слайде показаны два метода для решения этой задачи:\n        <ol className=\"compact\">\n          <li>Первое решение простое как двери — простой <code>switch</code> с дефолтным <em>case</em>-ом в случае если день не найдены.</li>\n          <li>Второй метод тоже рабочий, но для того чтобы его понять, нужно дольше вчитываться</li>\n        </ol>\n        Такой код существует повсюду, но он действительно неудобный и выглядит непрофессионально, 99% программистов выбрали бы работать с чем-то похожим на первый вариант.\n      </div>\n      <div className=\"bubble small subtle\" style={{\n            \"marginTop\": \"10px\"\n          }}>\n        Чтобы достичь <strong>KISS</strong> ― старайтесь писать максимально простой код. Если видите сложный (нечитаемый) участок кода, поищите более лаконичное решение той же самой задачи, и, отрефакторив написанное, вы удивитесь, что кусок на 200 строк на самом деле не так уж и необходим!\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-4\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"fontWeight\": \"900\",\n              \"marginRight\": \"0.25em\"\n            }}>SOLID</span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          Single responsibility, Open–closed, Liskov substitution, Interface segregation, Dependency inversion\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>SOLID — это <strong>5 принципов объектно-ориентированного программирования</strong>, которые описывают архитектуру программного обеспечения:</p>\n      <p>А если проще, то это правила, следуя которым, вы будете писать легкий для понимания, редактирования или повторного использования код.</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-1\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-1\">\n            <strong>Single responsibility</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>Принцип единой ответственности. Он означает, что <strong>каждый класс или структура должны иметь только одну задачу.</strong>. Все члены класса пишутся для выполнения данной ему задачи, и в нем не находится ни строчки кода, которая не относится к указанной для этого блока задачи. Если мы придерживаемся этого принципа, то мы определяем классы по их задачам еще на этапе проектирования программы.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">😢</span></h4>\n                <div>\n                  <SnippetL04S03 mdxType=\"SnippetL04S03\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">😎</span></h4>\n                <div>\n                  <SnippetL04S04 mdxType=\"SnippetL04S04\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              Я привел в пример класс <code>Task</code> — он сохраняет задачу в нашу базу данных и вычисляет время, необходимое для решения задачи.<br />Делаем вывод, что он не соответствует принципу <strong>Single Responsibility Principle</strong>. Почему мы не хотим, чтобы он выполнял и другие полезные функции, например, определял необходимое для выполнения задачи время? Потому что если через некоторое время у заказчика меняются параметры выполнения задач <em>(например, из-за релиза или изменения в составе команды программистов)</em>, нам придется переписывать класс <code>Task</code> в соответствии с изменениями в исходных данных, и тестировать, не сломался ли при том иной функционал, который <code>Task</code> выполняет. Согласно <strong>Single Responsibility Principle</strong> мы должны создать отдельный класс для расчета времени на выполнение заданий, который уже будет руководствоваться бизнес-логикой и другими входящими данными.\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-2\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-2\">\n            <strong>Open–closed</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>Принцип открытости / закрытости. Наш класс должен быть <strong>открытым для масштабирования, но закрытым для модификаций</strong>. Наш модуль должен быть разработан так, чтобы дописывался он только при создании новых требований — но касающихся начальной задачи. «Закрытый для модификаций» означает, что класс уже полностью готов и жизнеспособен, его задачи и назначения не меняются, следовательно мы не переписываем его существенно, кроме как в случае исправления багов. В C# это достигается <strong>принципом наследования</strong>.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">👎</span></h4>\n                <div>\n                  <SnippetL04S05 mdxType=\"SnippetL04S05\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">👍</span></h4>\n                <div>\n                <SnippetL04S06 mdxType=\"SnippetL04S06\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              <p>Рассмотрим пример с мокапом — прототипом страницы. Проблема данного класса в том, что когда заказчик хочет посмотреть на созданный дизайнерами мокап, но не может открыть изображение формата <em>tiff</em> или <em>cdr</em>, разработчику нужно будет вносить новый формат картинки, например <em>png</em>. Поэтому мы будем вынуждены добавить новое условие <code>if</code>, что противоречит <strong>Open Closed Principle</strong>.</p>\n              <p>На втором примере показано как это можно решить — есть базовый абстрактный класс <code>Mockup</code>, который частично реализует конвертацию картинки, а дочерние классы реализуют конвертацию картинки в необходимый формат. И если мы захотим добавить еще один формат, нам просто надо будет создать еще один класс, который наследуется от <code>Mockup</code> и реализовывает нужный нам метод конвертации.</p>\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-3\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-3\">\n            <strong>Liskov substitution</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>По принципу подстановки Лисков мы должны <strong>использовать любой дочерний класс вместо родительского</strong> таким же образом, не внося изменений. Дочерний класс не может нарушать определение типа, приведенные в родительском классе и противоречить его поведению собственным функционалом.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">🤦‍♂️</span></h4>\n                <div>\n                  <SnippetL04S07 mdxType=\"SnippetL04S07\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">💁‍♂️</span></h4>\n                <div>\n                  <SnippetL04S08 mdxType=\"SnippetL04S08\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              Вот как это можно проиллюстрировать: <code>Developer</code> является родительским классом для <code>JavaScriptDeveloper</code> и <code>CSharpDeveloper</code>. Наш класс <code>Developer</code> может создавать бэкенд и фронтенд приложения. Казалось бы все хорошо. <code>JavaScriptDeveloper</code> успешно реализует 2 метода. А вот с <code>CSharpDeveloper</code> не все так просто, он может написать сервер на <em>ASP.NET</em>-е, но совершенно не может во фронтенд. И если мы попробуем все же получить от него фронтенд, то поймаем ошибку - exception. По-хорошему нам нужно разделить функционал <code>Developer</code> на 2 части: <code>IFrontend</code> и <code>IBackend</code>, и реализовать их в соответствии с назначением производных классов: <code>JavaScriptDeveloper</code> у нас реализует и <code>IFrontend</code> и <code>IBackend</code>, а <code>CSharpDeveloper</code> только <code>IBackend</code>.\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-4\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-4\">\n            <strong>Interface segregation</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>Принцип разделения интерфейсов гласит, что не надо паковать вместе все интерфейсы подряд, надо их <strong>разделять по назначениям</strong>, чтобы пользователи могли выборочно имплементировать только те, которые используют, <em>а не все подряд, имеющиеся в программе</em>.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">💩</span></h4>\n                <div>\n                  <SnippetL04S09 mdxType=\"SnippetL04S09\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">🎉</span></h4>\n                <div>\n                  <SnippetL04S10 mdxType=\"SnippetL04S10\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              <p>Давайте предположим, что у нас есть интерфейс <code>IDeveloper</code>, который теперь умеет создавать сервер и десктопное приложение. Как и раньше, у нас есть <code>JavaScriptDeveloper</code> и <code>CSharpDeveloper</code>, которые могут использовать этот функционал по назначению. Для <em>JavaScript</em> приложение писалось бы под Electron, а на C# это было бы WPF приложение. Все классно, все довольны, но нет, потому что наш босс неожиданно говорит, что приложения на Electron у него лагают и вообще дорого платить этим JavaScript-разработчикам. Мы урезаем десктоп-проекты на JavaScript, пишем теперь только на WPF. И таким образом мы ломаем принцип <strong>Interface Segregation</strong>, потому что наш класс не может не выполнять свой функционал, и получается что JavaScript разработчики все еще пишут десктоп-проекты.</p>\n              <p>Решением этой проблемы будет опять же разделение интерфейса на несколько: <code>IDesktop</code> и <code>IBackend</code>. Это напоминает предыдущий пример, но здесь мы решаем другую проблему — не даем классу делать больше, чем нужно.</p>\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-5\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-5\">\n            <strong>Dependency inversion</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>И теперь последний и, пожалуй, самый трудный для понимания принцип — инверсия зависимостей.</p>\n            <ol className=\"inverted\">\n              <li>Классы высокого уровня не должны зависеть от классов низкого уровня, при этом оба должны зависеть от абстракций.</li>\n              <li>Абстракции не должны зависеть от деталей, но детали должны зависеть от абстракций.</li>\n            </ol>\n            <p>Что это значит? А это значит, что классы высокого уровня реализуют бизнес-правила или логику в системе. Низкоуровневые классы занимаются более подробными операциями, такими как работа с базой данных, передача сообщений в операционную систему - и так далее. Чтобы достичь инверсии зависимостей, мы должны держать эти высокоуровневые и низкоуровневые классы настолько слабосвязанными, насколько возможно. И как раз для этого мы пишем их зависимыми от абстракций, а не друг от друга.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">😭</span></h4>\n                <div>\n                  <SnippetL04S11 mdxType=\"SnippetL04S11\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">🤩</span></h4>\n                <div>\n                  <SnippetL04S12 mdxType=\"SnippetL04S12\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              <p>Давайте рассмотрим этот принцип на примере рассылки сообщений. На первом примере кода класс <code>Notification</code> полностью зависит от класса <code>Email</code>, потому что он отправляет только один тип сообщений. Что если мы захотим отправлять каким-то другим способом? Тогда нам надо будет копаться во всей системе сообщений. Это является признаком того, что система слишком тесно связана.</p>\n              <p>Чтобы сделать ее слабо связанной в этом случае нам нужно абстрагироваться от провайдера отправки сообщений <code>Email</code>. Для этого мы создаем интерфейс <code>IMessenger</code> с методом <code>Send</code> и реализуем его в двух классах ― <code>Email</code> и <code>SMS</code>. Класс <code>Notification</code> мы составляем так, чтобы отвязаться от конкретной реализации рассылки сообщений. В этом случае мы можем использовать принцип <strong>Dependency Injection</strong>, пробросив объект <code>Messenger</code> через конструктор. И в результате мы будем отправлять сообщения того класса, с которым сейчас работаем. Если мы создаем <code>Notification</code> с <code>Email</code> Messenger-ом, отправляется электронное письмо. Далее мы захотели сменить провайдера и присвоили свойства <code>Messenger</code> классу <code>SMS</code>, поэтому следующий вызов метода <code>Notify</code> уже пришлет <em>SMS</em>-ку.</p>\n            </div>\n          </div>\n        </li>\n      </ul>\n      <p>Каждый принцип <strong>SOLID</strong> предлагает нам способ написания логического, надежного и понятного кода, а язык С#, при соблюдении этих принципов, позволяет писать большие программы и легко их расширять.</p>\n    </div>\n  </li>\n    </ul>\n    <Level id=\"bonus\" number=\"\" name=\"Полезные ресурсы\" difficulty=\"\" objectives=\"\" labels={{\n      level: \"Бонус\",\n      backToTop: \"Наверх\",\n      difficulty: \"\",\n      objectives: \"\"\n    }} mdxType=\"Level\" />\n    <div className=\"columns\">\n  <div className=\"column col-6 col-sm-12\">\n    <p><strong>Books</strong> 📕</p>\n    <ul>\n      <li>«C# in Depth» <em>(4<sup>th</sup> edition)</em> by Jon Skeet</li>\n      <li>«C# 7.0 in a Nutshell» by Joseph Albahari, Ben Albahari</li>\n      <li>«C# 7.0 Pocket Reference» by Joseph Albahari, Ben Albahari</li>\n    </ul>\n  </div>\n  <div className=\"column col-6 col-sm-12\">\n    <p><strong>Links</strong> 🔗</p>  \n    <ul>\n      <li><a href=\"https://devdigest.today/\">Dev digest</a></li>\n      <li><a href=\"https://dou.ua/lenta/articles/net-for-beginners/\">How to learn .NET</a></li>\n      <li><a href=\"https://github.com/quozd/awesome-dotnet/\">Awesome .NET</a></li>\n    </ul>\n  </div>\n    </div>\n    <ThatsAllFolks mdxType=\"ThatsAllFolks\" />\n    <div className=\"bubble\">\n  Я могу долго говорить о C # и .NET, но в этой лекции поделился основным, по моему мнению, для вас на данный момент. На этом все, спасибо за внимание, ставьте оценку лекции в ваших личных кабинетах, оставляйте отзыв, задавайте вопросы, делайте домашку и до встречи на код-ревью! 👋\n    </div>\n\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["metadata","orderId","author","title","description","keywords","duration","publishedAt","hiddenFromMainPage","_frontmatter","layoutProps","MDXLayout","Lecture","MDXContent","components","props","mdxType","currentLanguage","languages","src","frameBorder","allow","allowFullScreen","className","data","rostyslavDiakiv2018Avatar","role","href","rel","icon","faFacebookSquare","faGithub","faLinkedin","faSkype","style","id","timeline","linkTo","number","name","difficulty","objectives","labels","level","backToTop","type","htmlFor","dotnetPlatform","alt","dotnet5Platform","nugetLogo","color","fontWeight","stackAndHeap","boxingUnboxing","constraintsTypes","lambdaExpressionStructure","delegateEventFlow","collectionsHierarchy","stack","exceptionClassHierarchy","isMDXComponent"],"sourceRoot":""}